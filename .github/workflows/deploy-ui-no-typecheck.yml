name: Deploy UI and Documentation (No TypeCheck)

on:
  push:
    branches: [main, master]
    paths:
      - 'ui/issuer/**'
      - 'docs/**'
      - '.github/workflows/deploy-ui-no-typecheck.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache dependencies - UI
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-ui-${{ hashFiles('ui/issuer/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-ui-

      - name: Cache dependencies - Docs
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-docs-${{ hashFiles('docs/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-docs-

      # Build UI without TypeScript checking
      - name: Install UI dependencies
        working-directory: ./ui/issuer
        run: npm ci

      - name: Create build-only tsconfig
        working-directory: ./ui/issuer
        run: |
          cat > tsconfig.build.json << 'EOF'
          {
            "compilerOptions": {
              "target": "ES2020",
              "useDefineForClassFields": true,
              "lib": ["ES2020", "DOM", "DOM.Iterable"],
              "module": "ESNext",
              "skipLibCheck": true,
              "allowJs": true,
              "noEmit": false,
              "noEmitOnError": false,
              "moduleResolution": "bundler",
              "allowImportingTsExtensions": true,
              "resolveJsonModule": true,
              "isolatedModules": true,
              "noEmit": true,
              "jsx": "react-jsx",
              "strict": false,
              "noUnusedLocals": false,
              "noUnusedParameters": false,
              "noFallthroughCasesInSwitch": false,
              "baseUrl": ".",
              "paths": {
                "@/*": ["./src/*"]
              }
            },
            "include": ["src"],
            "exclude": ["node_modules"]
          }
          EOF

      - name: Build UI application (Skip TypeScript)
        working-directory: ./ui/issuer
        run: |
          echo "Building UI with base path: /${{ github.event.repository.name }}/"
          
          # Skip TypeScript compilation and use Vite directly
          npx vite build --base=/${{ github.event.repository.name }}/
          
      # Build Documentation
      - name: Install Docs dependencies
        working-directory: ./docs
        run: npm ci

      - name: Add Playwright for Slidev
        working-directory: ./docs  
        run: npx playwright install chromium

      - name: Build Documentation
        working-directory: ./docs
        run: |
          echo "Building documentation with base path: /${{ github.event.repository.name }}/docs/"
          npx slidev build slides.md --base /${{ github.event.repository.name }}/docs/

      # Combine outputs
      - name: Prepare deployment directory
        run: |
          mkdir -p deploy
          
          # Check if UI build succeeded
          if [ -d "ui/issuer/dist" ]; then
            echo "‚úÖ UI build found, copying to deployment directory"
            cp -r ui/issuer/dist/* deploy/
          else
            echo "‚ùå UI build not found, creating placeholder"
            mkdir -p deploy
            cat > deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Bond Auction Platform - Build Error</title>
              <style>
                  body { font-family: Arial, sans-serif; padding: 2rem; text-align: center; }
                  .error { background: #fee; border: 1px solid #fcc; padding: 2rem; border-radius: 8px; }
              </style>
          </head>
          <body>
              <div class="error">
                  <h1>üöß Build in Progress</h1>
                  <p>The UI application is being updated. Please check back soon.</p>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # Copy docs
          if [ -d "docs/dist" ]; then
            echo "‚úÖ Documentation build found"
            mkdir -p deploy/docs
            cp -r docs/dist/* deploy/docs/
          else
            echo "‚ùå Documentation build not found"
          fi
          
          # Create landing page
          cat > deploy/landing.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Bond Auction Platform</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 2rem;
                      text-align: center;
                      background: #f5f5f5;
                  }
                  .container {
                      background: white;
                      padding: 3rem;
                      border-radius: 10px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  h1 { color: #333; }
                  .links {
                      display: flex;
                      gap: 2rem;
                      justify-content: center;
                      margin-top: 2rem;
                  }
                  .link-card {
                      flex: 1;
                      padding: 2rem;
                      background: #f8f9fa;
                      border-radius: 8px;
                      text-decoration: none;
                      color: #333;
                      transition: all 0.3s ease;
                  }
                  .link-card:hover {
                      background: #e9ecef;
                      transform: translateY(-2px);
                      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                  }
                  .icon { font-size: 3rem; margin-bottom: 1rem; }
                  @media (max-width: 600px) {
                      .links { flex-direction: column; }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üèõÔ∏è Bond Auction Platform</h1>
                  <p>Decentralized bond auctions with encrypted bidding</p>
                  
                  <div class="links">
                      <a href="./index.html" class="link-card">
                          <div class="icon">üíº</div>
                          <h2>Launch Application</h2>
                          <p>Create bonds, run auctions, and submit bids</p>
                      </a>
                      
                      <a href="./docs/" class="link-card">
                          <div class="icon">üìö</div>
                          <h2>View Documentation</h2>
                          <p>Interactive slides and user guide</p>
                      </a>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          echo "Deployment directory contents:"
          ls -la deploy/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy notification
        run: |
          echo "‚úÖ Deployment complete!"
          echo "üåê UI available at: ${{ steps.deployment.outputs.page_url }}"
          echo "üìö Docs available at: ${{ steps.deployment.outputs.page_url }}docs/"